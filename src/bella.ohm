Bella {
  Program    = Statement+
  Statement  = let id "=" Exp ";"                       -- vardec
             | function id "(" Params ")" "=" Exp       -- fundec
             | id "=" Exp ";"                           -- assign
             | Call ";"                                 -- call
             | while Exp Block                          -- while
  Block      = "{" Statement+ "}"
  Exp        = Exp1 "?" Exp1 ":" Exp                    -- condition
             | Exp1
  Exp1       = Exp2 ("&&" Exp2)+                        -- and
             | Exp2 ("||" Exp2)+                        -- or
             | Exp2
  Exp2       = Exp3 ("<"|"<="|"=="|"!="|">="|">") Exp3  -- binary
             | Exp3
  Exp3       = Exp3 ("+" | "-") Exp4                    -- binary
             | Exp4
  Exp4       = Exp4 ("*" | "/" | "%") Exp5              -- binary
             | Exp5
  Exp5       = Exp6 "**" Exp5                           -- binary
             | Exp6
  Exp6       = ("!" | "-") Exp6                         -- unary
             | Exp7
  Exp7       = num
             | true
             | false
             | Call
             | id
             | "(" Exp ")"                              -- parens
  Call       = id "(" Args ")"
  Params     = ListOf<id, ",">
  Args       = ListOf<Exp, ",">
  let        = "let" ~idchar
  function   = "function" ~idchar
  while      = "while" ~idchar
  true       = "true" ~idchar
  false      = "false" ~idchar
  keyword    = let | while | true | false
  num        = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  id         = ~keyword letter idchar*
  idchar     = letter | digit | "_"
  space     += "//" (~"\n" any)* "\n"                   -- comment
}

Bella {
  Program   = Statement+
  Statement = let id "=" Exp ";"                      -- vardec
            | function id "(" Params ")" "=" Exp ";"  -- fundec
            | id "=" Exp ";"                          -- assign
            | print Exp ";"                           -- print
            | while Test Block                        -- while
  Block     = "{" Statement+ "}"

  Exp       = "-" Exp4                                -- negation
            | Test "?" Exp1 ":" Exp                   -- conditional
            | Exp1
  Exp1      = Exp1 ("+" | "-") Exp2                   -- binary
            | Exp2
  Exp2      = Exp2 ("*" | "/" | "%") Exp3             -- binary
            | Exp3
  Exp3      = Exp4 "**" Exp3                          -- binary
            | Exp4
  Exp4      = num
            | Call
            | id
            | "(" Exp ")"                             -- parens

  Test      = "!" Test2                               -- not
            | Test1 ("&&" Test1)+                     -- and
            | Test1 ("||" Test1)+                     -- or
            | Test1
  Test1     = Exp ("<"|"<="|"=="|"!="|">="|">") Exp   -- relation
            | Test2
  Test2     = true
            | false
            | "(" Test ")"                            -- parens

  Call      = id "(" Args ")"
  Params    = ListOf<id, ",">
  Args      = ListOf<Exp, ",">

  let       = "let" ~idchar
  function  = "function" ~idchar
  while     = "while" ~idchar
  true      = "true" ~idchar
  false     = "false" ~idchar
  print     = "print" ~idchar
  keyword   = let | function | while | true | false
  num       = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  id        = ~keyword letter idchar*
  idchar    = letter | digit | "_"
  space    += "//" (~"\n" any)* "\n"                  -- comment
}

Bella {
  Program    = Statement+
  Statement  = let id "=" Exp ";"                       -- vardec
             | function id "(" Params ")" "=" Exp ";"   -- fundec
             | id "=" Exp ";"                           -- assign
             | print Exp ";"                            -- print
             | while Test Block                         -- while
  Block      = "{" Statement+ "}"

  Exp        = "-" Primary                              -- negation
             | Test "?" Arm ":" Exp                     -- conditional
             | Arm
  Arm        = Arm ("+" | "-") Term                     -- binary
             | Term
  Term       = Term ("*" | "/" | "%") Factor            -- binary
             | Factor
  Factor     = Primary "**" Factor                      -- binary
             | Primary
  Primary    = num
             | Call
             | id
             | "(" Exp ")"                              -- parens

  Test       = "!" TruthVal                             -- not
             | Condition ("&&" Condition)+              -- and
             | Condition ("||" Condition)+              -- or
             | Condition
  Condition  = Exp ("<"|"<="|"=="|"!="|">="|">") Exp    -- relation
             | TruthVal
  TruthVal   = true
             | false
             | "(" Test ")"                             -- parens

  Call       = id "(" Args ")"
  Params     = ListOf<id, ",">
  Args       = ListOf<Exp, ",">

  let        = "let" ~idchar
  function   = "function" ~idchar
  while      = "while" ~idchar
  true       = "true" ~idchar
  false      = "false" ~idchar
  print      = "print" ~idchar
  keyword    = let | function | while | true | false
  num        = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  id         = ~keyword letter idchar*
  idchar     = letter | digit | "_"
  space     += "//" (~"\n" any)* "\n"                   -- comment
}
